---
layout: post
title:  R and me
author: Kevin Cazelles
date:   2015-11-21
categories: R
---

*This post was first written in March 2015. I reworked it before releasing my website v2.0.*


I have been working with [R](http://cran.r-project.org) since 2009. Today I use R almost every day. I am grateful to all contributors for this amazing programming language. I like teaching how to handle R and I propose some packages, scripts and functions on [Github](https://github.com/KevCaz).

1-   **One tool for many tasks** <br/>
Statistical analysis, data analysis, data visualization and even more in few lines of code.

2-   **Free** <br/>
Well then, why paying for similar tool?

3-   **Easy to learn** <br/>
You can take many advantages from R without deep knowledge in programming (*i.e*, pointers, variable types, optimization...). After a couple of hours you will be able to create object and use them properly.

4-   **Huge amount of documentation** <br/>
An incredible amount of documentation is available. You can have access to many free documentation resources on the [CRAN](https://cran.r-project.org) website. There are also many books, such as those of the [Use R! ](http://www.springer.com/series/6991?detailsPage=titles) collection of Springer.

5-   **The number of packages** <br/>
With more than 7500 add-on packages (november 2015, for today's figure [see the CRAN website](https://cran.r-project.org/web/packages/)), it is very likely that common methods of your field have already been implemented! According to [this blog post](http://r4stats.com/2014/04/07/r-continues-its-rapid-growth/), the number of packages grows exponentially. As I was not able to reproduce the plot presented, I wrote a R script that searches on the CRAN all packages and the earliest recorded date associated. The code is slow and it may not be accurate. However, it provides valuable insights (see the figure below the code generated) and it is fully reproducible (get the script [numbeRPackage.R on Github](https://github.com/KevCaz/RScriptsBlog))

![Figure package]({{site.baseurl}}/blog/assets/figpkR.jpg)

6-   **The R community** <br/>
This community is large and become larger as R is more and more taught. This is a reliable source of answers for any kind of problem you may encounter. Look on the internet and you will find many [forums](http://stackoverflow.com/questions/tagged/r), [mailing lists](http://www.r-project.org/mail.html) and also [dedicated search engines](http://cran.r-project.org/search.html).

<br/>
<br/>
There are many other good reasons for using R. However I would also like to to warn you about two major sources of annoyance:

1-  **Train your memory** <br/>
In R, objects are defined and then used with associated methods. This requires you to understand the kind of object your analyses required. People who have previously handled programming language using matrix-vector approach (such as [Matlab](http://www.mathworks.com)) are often confused. For instance, to get a simple matrix product, you first define matrix:

{% highlight R %}
A <- matrix(c(2,5,6,1),2,2)   
B <- matrix(c(4,5,6,3),2,2)
{% endhighlight %}

But then if you do:

{% highlight R %}
C <- A*B
{% endhighlight %}

you do not get the matrix product you expect. Instead, you must write:

{% highlight R %}
C <- A%*%B
{% endhighlight %}

For any kind of object you intend to use, you must know how the methods you can apply to it work. This makes R easy to learn but. However it also means that you must remember quite a lot to be comfortable with R.


2-  **Slowness, really?** <br/>

The second source of dissatisfaction is about the speed of calculation. I have met people relatively new to R (but not from programming) blaming R for its slowness. It is true that if you compare with other languages (such as C), R is relatively slow. However it counterbalances this drawback by the number of methods already implemented which strongly decrease the number of lines of code you need or your analysis. This is even more true given some tricks making your code very efficient. Among them, the `apply()` functions (have a look [here](http://www.r-bloggers.com/the-r-apply-function-a-tutorial-with-examples/) and [here](https://nsaunders.wordpress.com/2010/08/20/a-brief-introduction-to-apply-in-r/)):

{% highlight R %}
?apply
{% endhighlight %}

Let's say **A** is a list of large matrices and you want to get the quantiles associated to each columns of the each matrix. Then you can write:

{% highlight R %}
B <- list()   
for (i in 1:length(A)){     
  B[[i]] <- matrix(0,5,10)    
  for (j in 1:ncol(A[[1]])){         
    B[[i]][,j] <- quantile(A[[i]][,j])  
  }   
}
{% endhighlight %}

otherwise you can simply enter:

{% highlight R %}
  B <- lapply(A,apply,2,quantile)
{% endhighlight %}

This makes R quite powerful. In this example, with R 3.1.2, it does not improve the time of calculation as you can see if you test the code below:
<script src="https://gist.github.com/KevCaz/d1b252265209be63d1e2.js"></script>

Nevertheless, you save a lot of coding time and it makes perfect sense for advanced R users. I remember a case (2 years ago) where the code took 5 seconds to do the calculation whereas with for loops, it required 45 minutes! Maybe current R version offers for-loops as efficient as `apply()` functions.

Finally, if you want to undertake a calculation which consumes a lot of time, you may have a look at the [snow package](http://cran.r-project.org/web/packages/snow/index.html) and related packages. They provide tools to parallel your code. Also if you are familiar with C and C++ programming languages, you will strongly benefit from the [Rcpp package](https://cran.r-project.org/web/packages/Rcpp/index.html). I recommend you to read [what Hadley Wickham wrote about Rcpp](http://adv-r.had.co.nz/Rcpp.html)) and also this paper by [Visser and colleagues](http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1004140).


## See also

-[R in the landscape of data analysis software](http://r4stats.com/articles/popularity/)

<br/>


**@++**

<br/>
